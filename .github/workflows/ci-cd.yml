---
name: CI/CD

on:
  merge_group:
  push:
    branches:
    - master
    tags:
    - >-
      [0-9]+.[0-9]+.[0-9]+
    - >-
      [0-9]+.[0-9]+.[0-9]+.dev[0-9]+
  pull_request:
    branches:
    - master
    - >-
      [0-9].[0-9]+.[0-9]+

env:
  FORCE_COLOR: 1

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        # prevent cache poisoning
        enable-cache: ${{ github.ref_type == 'tag' && 'false' || 'auto' }}
    - name: Build distribution üì¶
      run: uv build
    - name: Check distribution üì¶
      run: uvx twine check --strict dist/*
    - name: Upload distribution üì¶
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        python-version:
        - 3.8
        - 3.9
        - >-
          3.10
        - 3.11
        - 3.12
        - 3.13
        os:
        - ubuntu-24.04
        - ubuntu-24.04-arm
        include:
        - experimental: false
        - experimental: true  # no reliable moto release available
          python-version: 3.8
          os: ubuntu-24.04-arm
        - upload-coverage: false
        - upload-coverage: true
          python-version: 3.11
          os: ubuntu-24.04
      fail-fast: false
    env:
      UV_FROZEN: 1
    timeout-minutes: 5

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        submodules: true
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ matrix.python-version }}
        # prevent cache poisoning
        enable-cache: ${{ github.ref_type == 'tag' && 'false' || 'auto' }}
    - name: Run pre-commit hooks
      run: |
        uv run make pre-commit
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        uv run make mototest
    - name: Upload coverage to Codecov
      if: ${{ matrix.upload-coverage }}
      uses: codecov/codecov-action@v5.4.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}  # not required for public repos
        files: ./coverage.xml
        flags: unittests  # optional
        name: codecov-umbrella  # optional
        fail_ci_if_error: true  # optional (default = false)
        verbose: true  # optional (default = false)

  check:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
    - build
    - test
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  pypi-publish:
    name: Publish Python üêç distribution üì¶ to PyPI
    if: github.ref_type == 'tag'  # only publish on tag pushes
    needs:
    - check
    runs-on: ubuntu-24.04
    environment:
      name: pypi
      url: https://pypi.org/project/aiobotocore/${{ github.ref_name }}
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    timeout-minutes: 5

    steps:
    - name: Download distribution üì¶
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Check if distribution üì¶ names match git tag
      run: |
        test -f "dist/aiobotocore-${REF_NAME}.tar.gz"
        test -f "dist/aiobotocore-${REF_NAME}-py3-none-any.whl"
      env:
        REF_NAME: ${{ github.ref_name }}
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
