[build-system]
requires = ["setuptools>=68.2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "aiobotocore"
description = "Async client for aws services using botocore and aiohttp"
requires-python = ">=3.8"
authors = [
    { name = "Nikolay Novik", email = "nickolainovik@gmail.com" },
]
license = { text = "Apache License 2.0" }
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Intended Audience :: System Administrators',
    'Natural Language :: English',
    'License :: OSI Approved :: Apache Software License',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Environment :: Web Environment',
    'Framework :: AsyncIO',
]

dynamic = ["version", "readme"]

dependencies = [
    "aiohttp >= 3.9.2, < 4.0.0",
    "aioitertools >= 0.5.1, < 1.0.0",
    "botocore >= 1.36.0, < 1.36.4", # NOTE: When updating, always keep `project.optional-dependencies` aligned
    "python-dateutil >= 2.1, < 3.0.0",
    "jmespath >= 0.7.1, < 2.0.0",
    "multidict >= 6.0.0, < 7.0.0",
    "urllib3 >= 1.25.4, < 1.27; python_version < '3.10'",
    "urllib3 >= 1.25.4, != 2.2.0, < 3; python_version >= '3.10'",
    "wrapt >= 1.10.10, < 2.0.0",
]

[project.optional-dependencies]
awscli = [
    "awscli >= 1.37.0, < 1.37.4",
]
boto3 = [
    "boto3 >= 1.36.0, < 1.36.4",
]

[project.urls]
Repository = "https://github.com/aio-libs/aiobotocore"
Documentation = "https://aiobotocore.aio-libs.org"

[dependency-groups]
botocore-dev = [
    # keep in sync with https://github.com/boto/botocore/blob/develop/requirements-dev.txt
    # "wheel==0.43.0",
    # "behave==1.2.5",
    # "jsonschema==4.21.1",
    "coverage==7.2.7",
    # "setuptools==71.1.0;python_version>='3.12'",
    # "packaging==24.1;python_version>='3.12'", # Requirement for setuptools>=71

    # Pytest specific deps
    "pytest==8.1.1",
    "pytest-cov==5.0.0",
    "pytest-xdist==3.5.0",
    # "atomicwrites>=1.0", # Windows requirement
    # "colorama>0.3.0", # Windows requirement
]
dev = [
    "dill ~=0.3.3", # Used in test_patches.py
    "docker ~=7.1",
    "docutils >=0.16,<0.22", # Used in test_version.py
    "moto[server,s3,sqs,awslambda,dynamodb,cloudformation,sns,batch,ec2,rds] ~=4.2.9",
    "packaging ~=24.1", # Used in test_version.py
    "pip >=24.3.1,<26", # Used in test_version.py
    "pre-commit >=3.5.0,<5",
    "pytest-asyncio >=0.23.8,<0.26",
    "requests ~=2.32.3", # Used in test_version.py
    "time-machine ~=2.15.0", # Used in test_signers.py
    "tomli; python_version<'3.11'", # Used in test_version.py
    "werkzeug ~=3.0.6", # Used in moto_server.py
]

[tool.uv]
default-groups = [
    "botocore-dev",
    "dev",
]
required-version = ">=0.5.19"

[tool.setuptools.dynamic]
version = { attr = "aiobotocore.__version__" }
readme = { file = ["README.rst", "CHANGES.rst"] }

[tool.setuptools.packages.find]
include = ["aiobotocore*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
cache_dir = "/tmp/pytest_aiobotocore_cache"
markers = [
    "localonly",
    "config_kwargs",
    "patch_attributes",
]

[tool.isort]
profile = "black"
line_length = 79
honor_noqa = true
src_paths = ["aiobotocore", "tests"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Format same as Black.
line-length = 79
indent-width = 4

target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "UP"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings, spaces for indents
# and trailing commas.
quote-style = "preserve"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING",
]
