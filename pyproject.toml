[build-system]
requires = ["setuptools>=68.2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "aiobotocore"
description = "Async client for aws services using botocore and aiohttp"
requires-python = ">=3.8"
authors = [
    { name = "Nikolay Novik", email = "nickolainovik@gmail.com" },
]
license = { text = "Apache License 2.0" }
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Intended Audience :: System Administrators',
    'Natural Language :: English',
    'License :: OSI Approved :: Apache Software License',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Environment :: Web Environment',
    'Framework :: AsyncIO',
]

dynamic = ["version", "readme"]

dependencies = [
    "botocore >=1.35.47, <1.35.67", # NOTE: When updating, always keep `project.optional-dependencies` aligned
    "aiohttp >=3.9.2, <4.0.0",
    "wrapt >=1.10.10, <2.0.0",
    "aioitertools >=0.5.1, <1.0.0",
]

[project.optional-dependencies]
awscli = [
    "awscli >=1.35.13, <1.36.8",
]
boto3 = [
    "boto3 >=1.35.47, <1.35.67",
]

[project.urls]
Repository = "https://github.com/aio-libs/aiobotocore"
Documentation = "https://aiobotocore.aio-libs.org"

[tool.setuptools.dynamic]
version = { attr = "aiobotocore.__version__" }
readme = { file = ["README.rst", "CHANGES.rst"] }

[tool.setuptools.packages.find]
include = ["aiobotocore*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
cache_dir = "/tmp/pytest_aiobotocore_cache"
markers = [
    "moto",
    "config_kwargs",
    "patch_attributes",
]

[tool.isort]
profile = "black"
line_length = 79
honor_noqa = true
src_paths = ["aiobotocore", "tests"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Format same as Black.
line-length = 79
indent-width = 4

target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "UP"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings, spaces for indents
# and trailing commas.
quote-style = "preserve"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING",
]
